version: "3.7"

services:
  mariadb:
    image: wodby/mariadb:$MARIADB_TAG
    container_name: "${PROJECT_NAME}_mariadb"
    stop_grace_period: 30s
    environment:
      MYSQL_ROOT_PASSWORD: $DB_ROOT_PASSWORD
      MYSQL_DATABASE: $DB_NAME
      MYSQL_USER: $DB_USER
      MYSQL_PASSWORD: $DB_PASSWORD
  #    volumes:
  #      - ./mariadb-init:/docker-entrypoint-initdb.d # Place init .sql file(s) here.
  #      - /path/to/mariadb/data/on/host:/var/lib/mysql # Use bind mount

  php:
    image: wodby/drupal-php:$PHP_TAG
    container_name: "${PROJECT_NAME}_php"
    environment:
      PHP_SENDMAIL_PATH: /usr/sbin/sendmail -t -i -S mailhog:1025
#      PHP_SENDMAIL_PATH: /usr/sbin/sendmail -t -i -S opensmtpd:25
      DB_HOST: $DB_HOST
      DB_PORT: $DB_PORT
      DB_USER: $DB_USER
      DB_PASSWORD: $DB_PASSWORD
      DB_NAME: $DB_NAME
      DB_DRIVER: $DB_DRIVER
      PHP_FPM_USER: wodby
      PHP_FPM_GROUP: wodby
      COLUMNS: 80 # Set 80 columns for docker exec -it.
      # Read instructions at https://wodby.com/docs/stacks/php/local/#xdebug
#      PHP_XDEBUG: 1
#      PHP_XDEBUG_DEFAULT_ENABLE: 1
#      PHP_XDEBUG_REMOTE_CONNECT_BACK: 0
#      PHP_IDE_CONFIG: serverName=drupal
#      PHP_XDEBUG_IDEKEY: "drupal"
#          PHP_XDEBUG_REMOTE_HOST: host.docker.internal # Docker 18.03+ Mac/Win
      PHP_XDEBUG_REMOTE_HOST: 172.17.0.1 # Linux
    #      PHP_XDEBUG_REMOTE_HOST: 10.254.254.254 # macOS, Docker < 18.03
    #      PHP_XDEBUG_REMOTE_HOST: 10.0.75.1 # Windows, Docker < 18.03
    #      PHP_XDEBUG_REMOTE_LOG: /tmp/php-xdebug.log
    #      # PHPUnit Drupal testing configurations
    #      SIMPLETEST_BASE_URL: "http://nginx"
    #      SIMPLETEST_DB: "${DB_DRIVER}://${DB_USER}:${DB_PASSWORD}@${DB_HOST}/${DB_NAME}#tests_"
    #      MINK_DRIVER_ARGS_WEBDRIVER: '["chrome", {"browserName":"chrome","goog:chromeOptions":{"args":["--disable-gpu","--headless"]}}, "http://chrome:9515"]'
    volumes:
      - ./:/var/www/html:cached
  ## Alternative for macOS users: Mutagen https://wodby.com/docs/stacks/drupal/local#docker-for-mac
  #    - mutagen:/var/www/html
  ## For XHProf and Xdebug profiler traces
  #    - files:/mnt/files

  crond:
    image: wodby/drupal-php:$PHP_TAG
    container_name: "${PROJECT_NAME}_crond"
    environment:
      CRONTAB: "0 * * * * drush -r /var/www/html/web cron"
    command: sudo -E LD_PRELOAD=/usr/lib/preloadable_libiconv.so crond -f -d 0
    volumes:
      - ./:/var/www/html:cached

  nginx:
    image: wodby/nginx:$NGINX_TAG
    container_name: "${PROJECT_NAME}_nginx"
    depends_on:
      - php
    environment:
      NGINX_STATIC_OPEN_FILE_CACHE: "off"
      NGINX_ERROR_LOG_LEVEL: debug
      NGINX_BACKEND_HOST: php
      NGINX_SERVER_ROOT: /var/www/html/web
      NGINX_VHOST_PRESET: $NGINX_VHOST_PRESET
    #      NGINX_DRUPAL_FILE_PROXY_URL: http://example.com
    volumes:
      - ./:/var/www/html:cached
    ## Alternative for macOS users: Mutagen https://wodby.com/docs/stacks/drupal/local#docker-for-mac
    #    - mutagen:/var/www/html

    labels:
      - 'traefik.backend=${PROJECT_NAME}_nginx'
      - 'traefik.port=80'
      - 'traefik.frontend.rule=Host:${PROJECT_BASE_URL}'

  mailhog:
    image: mailhog/mailhog
    container_name: "${PROJECT_NAME}_mailhog"
    labels:
      - 'traefik.backend=${PROJECT_NAME}_mailhog'
      - 'traefik.port=8025'
      - 'traefik.frontend.rule=Host:mailhog.${PROJECT_BASE_URL}'

  #  varnish:
  #    image: wodby/varnish:$VARNISH_TAG
  #    container_name: "${PROJECT_NAME}_varnish"
  #    depends_on:
  #    - nginx
  #    environment:
  #      VARNISH_SECRET: secret
  #      VARNISH_BACKEND_HOST: nginx
  #      VARNISH_BACKEND_PORT: 80
  #      VARNISH_CONFIG_PRESET: drupal
  #      VARNISH_ALLOW_UNRESTRICTED_PURGE: 1
  #    labels:
  #    - "traefik.http.services.${PROJECT_NAME}_varnish.loadbalancer.server.port=6081"
  #    - "traefik.http.routers.${PROJECT_NAME}_varnish.rule=Host(`varnish.${PROJECT_BASE_URL}`)"


  adminer:
    container_name: "${PROJECT_NAME}_adminer"
    image: wodby/adminer:$ADMINER_TAG
    environment:
      #      ADMINER_SALT: adminer-salt
      # For PostgreSQL:
      #      ADMINER_DEFAULT_DB_DRIVER: pgsql
      ADMINER_DEFAULT_DB_HOST: $DB_HOST
      ADMINER_DEFAULT_DB_NAME: $DB_NAME
    labels:
      - 'traefik.backend=${PROJECT_NAME}_adminer'
      - 'traefik.port=9000'
      - 'traefik.frontend.rule=Host:adminer.${PROJECT_BASE_URL}'

  #  pma:
  #    image: phpmyadmin/phpmyadmin
  #    container_name: "${PROJECT_NAME}_pma"
  #    environment:
  #      PMA_HOST: $DB_HOST
  #      PMA_USER: $DB_USER
  #      PMA_PASSWORD: $DB_PASSWORD
  #      UPLOAD_LIMIT: 1G
  #    labels:
  #    - "traefik.http.routers.${PROJECT_NAME}_pma.rule=Host(`pma.${PROJECT_BASE_URL}`)"

  #  solr:
  #    image: wodby/solr:$SOLR_TAG
  #    container_name: "${PROJECT_NAME}_solr"
  #    environment:
  #      SOLR_DEFAULT_CONFIG_SET: $SOLR_CONFIG_SET
  #      SOLR_HEAP: 1024m
  #    labels:
  #    - "traefik.http.services.${PROJECT_NAME}_solr.loadbalancer.server.port=8983"
  #    - "traefik.http.routers.${PROJECT_NAME}_solr.rule=Host(`solr.${PROJECT_BASE_URL}`)"

  #  blackfire:
  #    image: blackfire/blackfire
  #    container_name: "${PROJECT_NAME}_blackfire"
  #    environment:
  #      BLACKFIRE_SERVER_ID: XXXXX
  #      BLACKFIRE_SERVER_TOKEN: YYYYY

  #  webgrind:
  #    image: wodby/webgrind:$WEBGRIND_TAG
  #    container_name: "${PROJECT_NAME}_webgrind"
  #    environment:
  #      WEBGRIND_PROFILER_DIR: /mnt/files/xdebug
  #    labels:
  #    - "traefik.http.routers.${PROJECT_NAME}_webgrind.rule=Host(`webgrind.${PROJECT_BASE_URL}`)"
  #    volumes:
  #    - files:/mnt/files

  #  kibana:
  #    image: wodby/kibana:$KIBANA_TAG
  #    container_name: "${PROJECT_NAME}_kibana"
  #    depends_on:
  #    - elasticsearch
  #    labels:
  #    - "traefik.http.services.${PROJECT_NAME}_kibana.loadbalancer.server.port=5601"
  #    - "traefik.http.routers.${PROJECT_NAME}_kibana.rule=Host(`kibana.${PROJECT_BASE_URL}`)"

#  traefik:
#    image: traefik:v2.0
#    container_name: "${PROJECT_NAME}_traefik"
#    command: --api.insecure=true --providers.docker
#    ports:
#    - '8000:80'
##    - '8080:8080' # Dashboard
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock

#  mutagen:
#    build:
#      context: .
#      dockerfile: mutagen/Dockerfile
#    init: true
#    container_name: "mutagen"
#    volumes:
#    - mutagen:/var/www/html

#volumes:
## For macOS users (Mutagen)
#  mutagen:
## For Xdebug profiler
#  files:
